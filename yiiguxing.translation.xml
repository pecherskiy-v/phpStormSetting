<application>
  <component name="AppStorage">
    <histories>
      <item value="очистка" />
      <item value="обнуление" />
      <item value="Add repository for class" />
      <item value="Returns a promise that is fulfilled when all of the provided promises have * been fulfilled or rejected. * * The returned promise is fulfilled with an array of inspection state arrays." />
      <item value="Waits until the promise completes if possible. * * Pass $unwrap as true to unwrap the result of the promise, either * returning the resolved value or throwing the rejected exception. * * If the promise cannot be waited on, then the promise will be rejected. *" />
      <item value="Waits on all of the provided promises and returns the fulfilled values. * * Returns an array that contains the value of each promise (in the same order * the promises were provided). An exception is thrown if any of the promises * are rejected." />
      <item value="PENDING" />
      <item value="Invoked when the promise fulfills." />
      <item value="* Returns true if a promise is fulfilled." />
      <item value="Like each_limit, but ensures that no promise in the given $iterable argument * is rejected. If any promise is rejected, then the aggregate promise is * rejected with the encountered rejection." />
      <item value="Initiate a competitive race between multiple promises or values (values will * become immediately fulfilled promises). * * When count amount of promises have been fulfilled, the returned promise is * fulfilled with an array that contains the fulfillment values of the winners * in order of resolution." />
      <item value="Given an array of promises, return a promise that is fulfilled when all the * items in the array are fulfilled. * * The promise's fulfillment value is an array with fulfillment values at * respective positions to the original array. If any promise in the array * rejects, the returned promise is rejected with the rejection reason." />
      <item value="Return type declaration must be compatible with CreditFlowInterface-&gt;attachmentD" />
      <item value="Appends a rejection handler callback to the promise, and returns a new * promise resolving to the return value of the callback if it is called, * or to its original fulfillment value if the promise is instead * fulfilled." />
      <item value="Appends fulfillment and rejection handlers to the promise, and returns * a new promise resolving to the return value of the called handler." />
      <item value="ATTACH" />
      <item value="уровень в работу" />
      <item value="задание в работу" />
      <item value="задание к выполнению" />
      <item value="завершить" />
      <item value="* Computes the difference of arrays by using a callback function for data comparison" />
      <item value="[EA] This loop does not loop." />
      <item value="последовательность" />
      <item value="полседовательность" />
      <item value="flush" />
      <item value="остаток" />
      <item value="* Retrieve an item from the cache by key." />
      <item value="Get an item from the cache, or execute the given Closure and store the result forever." />
      <item value="Store an item in the cache if the key does not exist." />
      <item value="Store an item in the cache." />
      <item value="Retrieve an item from the cache and delete it." />
      <item value="B 2 P LK LINK" />
      <item value="Attribute charset is not allowed here Inspection info: This inspection highlights unknown HTML tag attributes as invalid, and lets mark such attributes as Custom to avoid highlighting them as invalid." />
      <item value="send register complite" />
      <item value="вычисление" />
      <item value="расчет" />
      <item value="refund" />
      <item value="возврат" />
      <item value="приход" />
      <item value="Creates a sum mathematical expression with the given arguments. * First argument is considered the left expression and the second is the right expression. * When converted to string, it will generated a &lt;left expr&gt; + &lt;right expr&gt;. Example:" />
      <item value="month" />
      <item value="месяц" />
      <item value="mouth" />
      <item value="object mapping for [context] tried to parse field [null] as object, but found a concrete value" />
      <item value="as the final mapping would have more than 1 type: [record, doc]&quot;" />
      <item value="Package guzzlehttp/streams is abandoned, you should avoid using it. No replacement was suggested." />
      <item value="ruflin/elastica suggests installing egeloen/http-adapter (Allow using httpadapter transport)" />
      <item value="laravel.emergency: unable to create configured logger. using emergency logger." />
      <item value="Could provoke a PHP Fatal error (cannot use string offset as an array)." />
      <item value="Set swing.bufferPerWindow=false to workaround a slow scrolling in JDK6 (see IDEA-35883), # But this may lead to performance degradation in JDK8, because it disables a double buffering, # which is needed to eliminate tearing on blit-accelerated scrolling and to restore # a frame buffer content without the usual repainting, even when the EDT is blocked. #-" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="394" />
        <entry key="RUSSIAN" value="394" />
        <entry key="ROMANIAN" value="4" />
        <entry key="TURKISH" value="1" />
        <entry key="UKRAINIAN" value="2" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="targetLanguageSelection" value="PRIMARY_LANGUAGE" />
  </component>
</application>