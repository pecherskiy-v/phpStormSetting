<application>
  <component name="AppStorage">
    <histories>
      <item value="Message" />
      <item value="накопительная Комиссия" />
      <item value="накопительная Коммисия" />
      <item value="промежуточный ответ" />
      <item value="загружен" />
      <item value="отправлен" />
      <item value="processed" />
      <item value="обрабатывается" />
      <item value="process" />
      <item value="proccess" />
      <item value="simulate" />
      <item value="имитирую" />
      <item value="имитирующий" />
      <item value="Simulere" />
      <item value="Simulete" />
      <item value="Retrieve an item from the cache and delete it." />
      <item value="Срок жизни заявки истек" />
      <item value="Retrieve an item from the cache by key." />
      <item value="Method call is provided 1 parameters, but the method signature uses 0 parameters" />
      <item value="перечисление" />
      <item value="перечистелние" />
      <item value="calculation" />
      <item value="расчет" />
      <item value="расчяет" />
      <item value="math" />
      <item value="Composer packages were changed. PHP_CodeSniffer config was updated according to composer.json" />
      <item value="ERROR: Removing network for build" />
      <item value="WARNING: You most probably have uncommitted changes. WARNING: These changes will not be tested. " />
      <item value="перестраховаться" />
      <item value="перестраховываемся" />
      <item value="поле не может быть пустым" />
      <item value="совпадения" />
      <item value="очистка" />
      <item value="обнуление" />
      <item value="Add repository for class" />
      <item value="Returns a promise that is fulfilled when all of the provided promises have * been fulfilled or rejected. * * The returned promise is fulfilled with an array of inspection state arrays." />
      <item value="Waits until the promise completes if possible. * * Pass $unwrap as true to unwrap the result of the promise, either * returning the resolved value or throwing the rejected exception. * * If the promise cannot be waited on, then the promise will be rejected. *" />
      <item value="Waits on all of the provided promises and returns the fulfilled values. * * Returns an array that contains the value of each promise (in the same order * the promises were provided). An exception is thrown if any of the promises * are rejected." />
      <item value="PENDING" />
      <item value="Invoked when the promise fulfills." />
      <item value="* Returns true if a promise is fulfilled." />
      <item value="Like each_limit, but ensures that no promise in the given $iterable argument * is rejected. If any promise is rejected, then the aggregate promise is * rejected with the encountered rejection." />
      <item value="Initiate a competitive race between multiple promises or values (values will * become immediately fulfilled promises). * * When count amount of promises have been fulfilled, the returned promise is * fulfilled with an array that contains the fulfillment values of the winners * in order of resolution." />
      <item value="Given an array of promises, return a promise that is fulfilled when all the * items in the array are fulfilled. * * The promise's fulfillment value is an array with fulfillment values at * respective positions to the original array. If any promise in the array * rejects, the returned promise is rejected with the rejection reason." />
      <item value="Return type declaration must be compatible with CreditFlowInterface-&gt;attachmentD" />
      <item value="Appends a rejection handler callback to the promise, and returns a new * promise resolving to the return value of the callback if it is called, * or to its original fulfillment value if the promise is instead * fulfilled." />
      <item value="Appends fulfillment and rejection handlers to the promise, and returns * a new promise resolving to the return value of the called handler." />
      <item value="ATTACH" />
      <item value="уровень в работу" />
      <item value="задание в работу" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="ENGLISH" value="417" />
        <entry key="DANISH" value="1" />
        <entry key="RUSSIAN" value="417" />
        <entry key="ROMANIAN" value="4" />
        <entry key="TURKISH" value="1" />
        <entry key="UKRAINIAN" value="2" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="targetLanguageSelection" value="PRIMARY_LANGUAGE" />
  </component>
</application>